version: '3.8'

services:
  server:
    image: 'app-server:latest'
    env_file:
      - ./.env
    build:
      context: ./spring-server
      dockerfile: Dockerfile
    container_name: spring-website
    restart: on-failure
    ports:
      - '${DOCKER_BACKEND_PORT}:${SPRING_PORT}'
    depends_on:
      - db
    environment:
      - SPRING_PORTS=$SPRING_PORT
      - SPRING_DATASOURCE_URL=$SPRING_DATASOURCE_URL
      - SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME
      - SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD
      - SPRING_DATASOURCE_DRIVER=$SPRING_DATASOURCE_DRIVER
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=$SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
      - SPRING_JPA_HIBERNATE_DDL_AUTO=$SPRING_JPA_HIBERNATE_DDL_AUTO
      - GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
      - GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
    volumes:
      - $SPRING_RESOURCE_VOLUME
  db:
    image: 'postgres:13.1-alpine'
    restart: on-failure
    env_file:
      - ./.env
    container_name: db-postgres
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_DB=$POSTGRES_DB
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '${POSTGRES_PORTS}'
    volumes:
      - $POSTGRES_VOLUME_DATA
      - $POSTGRES_VOLUME_SQL_SCRIPTS
  client:
    container_name: client_react
    image: 'app-client:latest'
    restart: on-failure
    build:
      dockerfile: Dockerfile
      context: ./react-website
    ports:
      - '80:3000'
    volumes:
      - /app/node_modules
      - ./client:/app
  # nginx:
  #   image: nginx-custom:latest
  #   build:
  #     context: ./
  #     dockerfile: nginx.Dockerfile
  #   restart: unless-stopped
  #   tty: true
  #   container_name: nginx
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - "8080:8080"
  #     - "9090:9090"
  #   networks:
  #     - app-network
#  minio:
#    image: minio/minio:latest
#    command: server --console-address ":9001" /data/
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    environment:
#      MINIO_ROOT_USER: $MINIO_ROOT_USER
#      MINIO_ROOT_PASSWORD: $MINIO_ROOT_PASSWORD
#    volumes:
#      - minio-storage-r:/data
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
#      interval: 30s
#      timeout: 20s
#      retries: 3
 
#  volumes:
#    - minio-storage-r: